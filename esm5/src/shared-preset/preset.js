import { Observable } from 'rxjs';
import { cssClassNames, hasCssClassName, removeCssClassName, addCssClassName, isImageElement, isChildOfPicture, setSourcesToLazy, setImage, setImageAndSourcesToError, setImageAndSourcesToLazy, setImageAndSourcesToDefault } from '../util';
var end = function (_a) {
    var element = _a.element;
    return addCssClassName(element, cssClassNames.loaded);
};
var ɵ0 = end;
export var loadImage = function (_a) {
    var element = _a.element, useSrcset = _a.useSrcset, imagePath = _a.imagePath;
    var img;
    if (isImageElement(element) && isChildOfPicture(element)) {
        var parentClone = element.parentNode.cloneNode(true);
        img = parentClone.getElementsByTagName('img')[0];
        setSourcesToLazy(img);
        setImage(img, imagePath, useSrcset);
    }
    else {
        img = new Image();
        if (isImageElement(element) && element.sizes) {
            img.sizes = element.sizes;
        }
        if (useSrcset) {
            img.srcset = imagePath;
        }
        else {
            img.src = imagePath;
        }
    }
    return Observable.create(function (observer) {
        img.onload = function () {
            observer.next(imagePath);
            observer.complete();
        };
        img.onerror = function (err) {
            observer.error(null);
        };
    });
};
var setErrorImage = function (_a) {
    var element = _a.element, errorImagePath = _a.errorImagePath, useSrcset = _a.useSrcset;
    setImageAndSourcesToError(element, errorImagePath, useSrcset);
    addCssClassName(element, cssClassNames.failed);
};
var ɵ1 = setErrorImage;
var setLoadedImage = function (_a) {
    var element = _a.element, imagePath = _a.imagePath, useSrcset = _a.useSrcset;
    setImageAndSourcesToLazy(element, imagePath, useSrcset);
};
var ɵ2 = setLoadedImage;
var setup = function (_a) {
    var element = _a.element, defaultImagePath = _a.defaultImagePath, useSrcset = _a.useSrcset;
    setImageAndSourcesToDefault(element, defaultImagePath, useSrcset);
    if (hasCssClassName(element, cssClassNames.loaded)) {
        removeCssClassName(element, cssClassNames.loaded);
    }
};
var ɵ3 = setup;
export var sharedPreset = {
    finally: end,
    loadImage: loadImage,
    setErrorImage: setErrorImage,
    setLoadedImage: setLoadedImage,
    setup: setup
};
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2V0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctbGF6eWxvYWQtaW1hZ2UvIiwic291cmNlcyI6WyJzcmMvc2hhcmVkLXByZXNldC9wcmVzZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBVyxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQ0wsYUFBYSxFQUNiLGVBQWUsRUFDZixrQkFBa0IsRUFDbEIsZUFBZSxFQUNmLGNBQWMsRUFDZCxnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLFFBQVEsRUFDUix5QkFBeUIsRUFDekIsd0JBQXdCLEVBQ3hCLDJCQUEyQixFQUM1QixNQUFNLFNBQVMsQ0FBQztBQUdqQixJQUFNLEdBQUcsR0FBYyxVQUFDLEVBQVc7UUFBVCxvQkFBTztJQUFPLE9BQUEsZUFBZSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDO0FBQTlDLENBQThDLENBQUM7O0FBRXZGLE1BQU0sQ0FBQyxJQUFNLFNBQVMsR0FBZ0IsVUFBQyxFQUFpQztRQUEvQixvQkFBTyxFQUFFLHdCQUFTLEVBQUUsd0JBQVM7SUFDcEUsSUFBSSxHQUFxQixDQUFDO0lBQzFCLElBQUksY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ3hELElBQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxVQUFXLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBdUIsQ0FBQztRQUM5RSxHQUFHLEdBQUcsV0FBVyxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pELGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3RCLFFBQVEsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0tBQ3JDO1NBQU07UUFDTCxHQUFHLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNsQixJQUFJLGNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQzVDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztTQUMzQjtRQUNELElBQUksU0FBUyxFQUFFO1lBQ2IsR0FBRyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7U0FDeEI7YUFBTTtZQUNMLEdBQUcsQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDO1NBQ3JCO0tBQ0Y7SUFFRCxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsVUFBQyxRQUF5QjtRQUNqRCxHQUFHLENBQUMsTUFBTSxHQUFHO1lBQ1gsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN6QixRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDdEIsQ0FBQyxDQUFDO1FBQ0YsR0FBRyxDQUFDLE9BQU8sR0FBRyxVQUFBLEdBQUc7WUFDZixRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBRUYsSUFBTSxhQUFhLEdBQW9CLFVBQUMsRUFBc0M7UUFBcEMsb0JBQU8sRUFBRSxrQ0FBYyxFQUFFLHdCQUFTO0lBQzFFLHlCQUF5QixDQUFDLE9BQU8sRUFBRSxjQUFjLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDOUQsZUFBZSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDOztBQUVGLElBQU0sY0FBYyxHQUFxQixVQUFDLEVBQWlDO1FBQS9CLG9CQUFPLEVBQUUsd0JBQVMsRUFBRSx3QkFBUztJQUN2RSx3QkFBd0IsQ0FBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQzFELENBQUMsQ0FBQzs7QUFFRixJQUFNLEtBQUssR0FBWSxVQUFDLEVBQXdDO1FBQXRDLG9CQUFPLEVBQUUsc0NBQWdCLEVBQUUsd0JBQVM7SUFDNUQsMkJBQTJCLENBQUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBRWxFLElBQUksZUFBZSxDQUFDLE9BQU8sRUFBRSxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDbEQsa0JBQWtCLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNuRDtBQUNILENBQUMsQ0FBQzs7QUFFRixNQUFNLENBQUMsSUFBTSxZQUFZLEdBQUc7SUFDMUIsT0FBTyxFQUFFLEdBQUc7SUFDWixTQUFTLFdBQUE7SUFDVCxhQUFhLGVBQUE7SUFDYixjQUFjLGdCQUFBO0lBQ2QsS0FBSyxPQUFBO0NBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIGNzc0NsYXNzTmFtZXMsXG4gIGhhc0Nzc0NsYXNzTmFtZSxcbiAgcmVtb3ZlQ3NzQ2xhc3NOYW1lLFxuICBhZGRDc3NDbGFzc05hbWUsXG4gIGlzSW1hZ2VFbGVtZW50LFxuICBpc0NoaWxkT2ZQaWN0dXJlLFxuICBzZXRTb3VyY2VzVG9MYXp5LFxuICBzZXRJbWFnZSxcbiAgc2V0SW1hZ2VBbmRTb3VyY2VzVG9FcnJvcixcbiAgc2V0SW1hZ2VBbmRTb3VyY2VzVG9MYXp5LFxuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0RlZmF1bHRcbn0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBGaW5hbGx5Rm4sIExvYWRJbWFnZUZuLCBTZXRFcnJvckltYWdlRm4sIFNldExvYWRlZEltYWdlRm4sIFNldHVwRm4gfSBmcm9tICcuLi90eXBlcyc7XG5cbmNvbnN0IGVuZDogRmluYWxseUZuID0gKHsgZWxlbWVudCB9KSA9PiBhZGRDc3NDbGFzc05hbWUoZWxlbWVudCwgY3NzQ2xhc3NOYW1lcy5sb2FkZWQpO1xuXG5leHBvcnQgY29uc3QgbG9hZEltYWdlOiBMb2FkSW1hZ2VGbiA9ICh7IGVsZW1lbnQsIHVzZVNyY3NldCwgaW1hZ2VQYXRoIH0pID0+IHtcbiAgbGV0IGltZzogSFRNTEltYWdlRWxlbWVudDtcbiAgaWYgKGlzSW1hZ2VFbGVtZW50KGVsZW1lbnQpICYmIGlzQ2hpbGRPZlBpY3R1cmUoZWxlbWVudCkpIHtcbiAgICBjb25zdCBwYXJlbnRDbG9uZSA9IGVsZW1lbnQucGFyZW50Tm9kZSEuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxQaWN0dXJlRWxlbWVudDtcbiAgICBpbWcgPSBwYXJlbnRDbG9uZS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaW1nJylbMF07XG4gICAgc2V0U291cmNlc1RvTGF6eShpbWcpO1xuICAgIHNldEltYWdlKGltZywgaW1hZ2VQYXRoLCB1c2VTcmNzZXQpO1xuICB9IGVsc2Uge1xuICAgIGltZyA9IG5ldyBJbWFnZSgpO1xuICAgIGlmIChpc0ltYWdlRWxlbWVudChlbGVtZW50KSAmJiBlbGVtZW50LnNpemVzKSB7XG4gICAgICBpbWcuc2l6ZXMgPSBlbGVtZW50LnNpemVzO1xuICAgIH1cbiAgICBpZiAodXNlU3Jjc2V0KSB7XG4gICAgICBpbWcuc3Jjc2V0ID0gaW1hZ2VQYXRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbWcuc3JjID0gaW1hZ2VQYXRoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBPYnNlcnZhYmxlLmNyZWF0ZSgob2JzZXJ2ZXI6IFN1YmplY3Q8c3RyaW5nPikgPT4ge1xuICAgIGltZy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICBvYnNlcnZlci5uZXh0KGltYWdlUGF0aCk7XG4gICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgaW1nLm9uZXJyb3IgPSBlcnIgPT4ge1xuICAgICAgb2JzZXJ2ZXIuZXJyb3IobnVsbCk7XG4gICAgfTtcbiAgfSk7XG59O1xuXG5jb25zdCBzZXRFcnJvckltYWdlOiBTZXRFcnJvckltYWdlRm4gPSAoeyBlbGVtZW50LCBlcnJvckltYWdlUGF0aCwgdXNlU3Jjc2V0IH0pID0+IHtcbiAgc2V0SW1hZ2VBbmRTb3VyY2VzVG9FcnJvcihlbGVtZW50LCBlcnJvckltYWdlUGF0aCwgdXNlU3Jjc2V0KTtcbiAgYWRkQ3NzQ2xhc3NOYW1lKGVsZW1lbnQsIGNzc0NsYXNzTmFtZXMuZmFpbGVkKTtcbn07XG5cbmNvbnN0IHNldExvYWRlZEltYWdlOiBTZXRMb2FkZWRJbWFnZUZuID0gKHsgZWxlbWVudCwgaW1hZ2VQYXRoLCB1c2VTcmNzZXQgfSkgPT4ge1xuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0xhenkoZWxlbWVudCwgaW1hZ2VQYXRoLCB1c2VTcmNzZXQpO1xufTtcblxuY29uc3Qgc2V0dXA6IFNldHVwRm4gPSAoeyBlbGVtZW50LCBkZWZhdWx0SW1hZ2VQYXRoLCB1c2VTcmNzZXQgfSkgPT4ge1xuICBzZXRJbWFnZUFuZFNvdXJjZXNUb0RlZmF1bHQoZWxlbWVudCwgZGVmYXVsdEltYWdlUGF0aCwgdXNlU3Jjc2V0KTtcblxuICBpZiAoaGFzQ3NzQ2xhc3NOYW1lKGVsZW1lbnQsIGNzc0NsYXNzTmFtZXMubG9hZGVkKSkge1xuICAgIHJlbW92ZUNzc0NsYXNzTmFtZShlbGVtZW50LCBjc3NDbGFzc05hbWVzLmxvYWRlZCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBzaGFyZWRQcmVzZXQgPSB7XG4gIGZpbmFsbHk6IGVuZCxcbiAgbG9hZEltYWdlLFxuICBzZXRFcnJvckltYWdlLFxuICBzZXRMb2FkZWRJbWFnZSxcbiAgc2V0dXBcbn07XG4iXX0=